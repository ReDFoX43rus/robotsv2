
#include "wifi/wifi.h"

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"

#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_event_loop.h"
#include "esp_log.h"
#include "esp_ota_ops.h"
#include "fileio.h"

#include "nvs.h"
#include "nvs_flash.h"

#include "uart.h"

static void __attribute__((noreturn)) task_fatal_error()
{
    ESP_LOGE(TAG, "Exiting task due to fatal error...");
    (void)vTaskDelete(NULL);

    while (1) {
        ;
    }
}

static void start(void* arg){

	CWifi wifi = CWifi();
	wifi.acces_point_update();

	ESP_LOGI(TAG, "Wi-Fi started...");
	vTaskDelay(1000 / portTICK_PERIOD_MS);



	//xEventGroupWaitBits(wifi_event_group, DOWNLOADED_BIT, true, true, portMAX_DELAY);
	vTaskDelay(1000 / portTICK_PERIOD_MS);

	esp_err_t err;
     /* update handle : set by esp_ota_begin(), must be freed via esp_ota_end() */
    esp_ota_handle_t update_handle = 0 ;
    const esp_partition_t *update_partition = NULL;

    ESP_LOGI(TAG, "Starting OTA example...");

    const esp_partition_t *configured = esp_ota_get_boot_partition();
    const esp_partition_t *running = esp_ota_get_running_partition();

    if (configured != running) {
        ESP_LOGW(TAG, "Configured OTA boot partition at offset 0x%08x, but running from offset 0x%08x",
                 configured->address, running->address);
        ESP_LOGW(TAG, "(This can happen if either the OTA boot data or preferred boot image become corrupted somehow.)");
    }
    ESP_LOGI(TAG, "Running partition type %d subtype %d (offset 0x%08x)",
             running->type, running->subtype, running->address);






	update_partition = esp_ota_get_next_update_partition(NULL);
    ESP_LOGI(TAG, "Writing to partition subtype %d at offset 0x%x",
             update_partition->subtype, update_partition->address);
    assert(update_partition != NULL);

    err = esp_ota_begin(update_partition, OTA_SIZE_UNKNOWN, &update_handle);
    if (err != ESP_OK) {
        ESP_LOGE(TAG, "esp_ota_begin failed, error=%d", err);
        task_fatal_error();
    }
    ESP_LOGI(TAG, "esp_ota_begin succeeded");



	CFile file = CFile("/fat/esp32_robots.bin", FM_READ);

	if (!file.IsOpened()){
		ESP_LOGI(TAG, "Cannot open file");
		task_fatal_error();
	}
	int file_length = file.GetSize();
	if(file_length < 10){
		ESP_LOGI(TAG, "ERROR EMPTY FILE");
		task_fatal_error();
	}

	ESP_LOGE(TAG, "file length=%d", file_length);


	char buff[1024];
	char c;
	size_t buff_length;
	size_t total_writed = 0;
	while (total_writed < file_length) {
		buff_length = file.GetString(buff, sizeof(buff)-1);
		err = esp_ota_write( update_handle, (const void *)buff, buff_length);
        if (err != ESP_OK) {
        	ESP_LOGE(TAG, "Error: esp_ota_write failed! err=0x%x", err);
            task_fatal_error();
		}
		total_writed += buff_length;

		uart << total_writed << endl;
	}

	ESP_LOGE(TAG, "Image has written... %d", total_writed);

	if ((err = esp_ota_end(update_handle)) != ESP_OK) {
	   ESP_LOGE(TAG, "esp_ota_end failed! (0x%X)", err);
	   task_fatal_error();
	}
   	err = esp_ota_set_boot_partition(update_partition);
   	if (err != ESP_OK) {
	   ESP_LOGE(TAG, "esp_ota_set_boot_partition failed! err=0x%x", err);
	   task_fatal_error();
   	}
   	ESP_LOGI(TAG, "Prepare to restart system!");
   	esp_restart();




}

void wifi_update(){
	xTaskCreate(start,"start_update",4096,NULL,5, NULL);
}
