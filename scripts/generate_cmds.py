import os
import time

srcPath = os.path.dirname(os.path.abspath(__file__)) + "/../src"
cmdPath = srcPath + "/cconsole/ccmds"
generatorPath = srcPath + "/../scripts/generator.data"

cmdFiles = [f[4:-4] for f in os.listdir(cmdPath) if f.endswith(".cpp")]
print ("Cmds detected: ")
for cmd in cmdFiles:
	print("\t" + cmd)

def fwrite(f, tmp):
	print(tmp, end = '')
	f.write(tmp)
	return

def getLastModificationTime(filename):
	try:
		mtime = os.path.getctime(filename)
	except OSError:
		mtime = 0
	return str(os.stat(filename).st_mtime).replace('.', '')

def generateCmdlist():
	print ("Generating: cmdlist.h")
	cmdlist = open(srcPath + "/cconsole/ccmds/cmdlist.h", "w")
	fwrite(cmdlist, "/* This file is autogenerated by python script. Don't touch this ;) */\n\n")
	fwrite(cmdlist, "#ifndef CCONSOLE_CONSOLE_AUTOGENERATED_H\n")
	fwrite(cmdlist, "#define CCONSOLE_CONSOLE_AUTOGENERATED_H\n\n")
	fwrite(cmdlist, "#include \"iobase/iobase.h\"\n")
	for cmd in cmdFiles:
		tmp = "extern void Cmd" + cmd.title() + "Handler(CIOBase &io, int argc, char **argv);\n"
		fwrite(cmdlist, tmp)

	fwrite(cmdlist, "\n#endif /* end of include guard: CCONSOLE_CONSOLE_AUTOGENERATED_H */")
	cmdlist.close();
	print("")
	return getLastModificationTime(srcPath + "/cconsole/ccmds/cmdlist.h")

def generateConsoleAutogeneratedH():
	print ("Generating: console_autogenerated.h")

	cmdEnum = open(srcPath + "/cconsole/console_autogenerated.h", "w")
	fwrite(cmdEnum, "/* This file is autogenerated by python script. Don't touch this ;) */\n")
	fwrite(cmdEnum, "enum CmdTypes {\n")
	for cmd in cmdFiles:
		tmp = "\tCMD_" + cmd.upper() + ",\n"
		fwrite(cmdEnum, tmp)
	fwrite(cmdEnum, "\tMAX_CMDS\n")
	fwrite(cmdEnum, "};\n")
	cmdEnum.close();
	print("")
	return getLastModificationTime(srcPath + "/cconsole/console_autogenerated.h")

def generateConsoleAutogeneratedCPP():
	print("Generating console_autogenerated.cpp")
	cauto = open(srcPath + "/cconsole/console_autogenerated.cpp", "w")
	fwrite(cauto, "/* This file is autogenerated by python script. Don't touch this ;) */\n")
	fwrite(cauto, "#include \"console.h\"\n")
	fwrite(cauto, "#include \"ccmds/cmdlist.h\"\n")
	fwrite(cauto, "#include \"string.h\"\n\n")
	fwrite(cauto, "CConsole::CConsole(){\n")
	for cmd in cmdFiles:
		tmp = "\tRegisterCmd(CMD_" + cmd.upper() + ", Cmd" + cmd.title() + "Handler);\n"
		fwrite(cauto, tmp)
	fwrite(cauto, "}\n\n")

	fwrite(cauto, "bool CConsole::RegisterCmd(CmdTypes type, void (*Handler)(CIOBase &io, int argc, char **argv)){\n")
	fwrite(cauto, "\tif(type < MAX_CMDS)\n")
	fwrite(cauto, "\t\tm_Cmds[type].Handle = Handler;\n\n")
	fwrite(cauto, "\tswitch(type){\n")

	for cmd in cmdFiles:
		tmp = "\t\tcase CMD_" + cmd.upper() + ":\n" + "\t\t\tstrcpy(m_Cmds[CMD_" + cmd.upper() + "].name, \"" + cmd + "\");\n" + "\t\t\treturn true;\n"
		fwrite(cauto, tmp)

	fwrite(cauto, "\t\tdefault:\n\t\t\treturn false;\n")

	fwrite(cauto, "\t}\n")
	fwrite(cauto, "}\n")
	cauto.close()
	print("")
	return getLastModificationTime(srcPath + "/cconsole/console_autogenerated.cpp")

def generate():
	generateCmdlist()
	generateConsoleAutogeneratedH()
	generateConsoleAutogeneratedCPP()

	fullPath = [os.path.join(cmdPath, f) for f in os.listdir(cmdPath) if f.endswith(".cpp")]
	fullPath.sort()

	f = open(generatorPath, "w")
	for fp in fullPath:
		f.write(fp + "\n")
	f.close()

	return

def checkForNewCmds():
	fullPath = [os.path.join(cmdPath, f) for f in os.listdir(cmdPath) if f.endswith(".cpp")]
	fullPath.sort()

	try:
		f = open(generatorPath, "r")
		content = f.read().split("\n")
		f.close()

		# Check for new commands
		signs = [x in content for x in fullPath]
		for s in signs:
			if not s:
				return 1

		# Check for removed commands
		signs = [x in fullPath for x in content[:-1]]
		for s in signs:
			if not s:
				return 1

		return 0
	except FileNotFoundError:
		return 1

# Entry point:
# Check if there is storage file

if checkForNewCmds():
	print("New commands were found\nGenerating stub...")
	generate()
else:
	print("No changes were done")
quit()
